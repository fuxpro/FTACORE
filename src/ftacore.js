// Generated by CoffeeScript 1.9.2
(function() {
  var Actor, CARD_ACTION, EVENT_TYPE, Event, PRINTER, PRINTER_ACTION, SERVICE_NAME, actor, addListener, dll, events, fireEvent, getCardReaderStatus, getCardReaderStatusSync, getPrinterStatus, getPrinterStatusSync, operateCard, operateCardSync, operatePrinter, operatePrinterSync, printData, printDataSync, printDimensionCodeData, printDimensionCodeDataSync, readCard, readCardSync,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  events = require('events');

  dll = require('./dll.coffee');

  EVENT_TYPE = ['insertCard', 'dropCard', 'retainCard', 'insertPaper', 'takePaper', 'retainPaper'];

  SERVICE_NAME = ['NtMagneticStripeReader', 'NtCardReader', 'NtCLCardReader', 'NtIdentityReader'];

  CARD_ACTION = ["reset", "cancelRead", "off", "close"];

  PRINTER = ['NtDocumentPrinter', 'NtReceiptPrinter'];

  PRINTER_ACTION = ['cancelPrint', 'eject', 'retain', 'reset', 'close'];

  Event = (function() {
    function Event(_source, _fireTime, _type) {
      this.source = _source;
      this.fireTime = _fireTime;
      this.type = _type;
    }

    return Event;

  })();

  Actor = (function(superClass) {
    extend(Actor, superClass);

    function Actor() {}

    return Actor;

  })(events.EventEmitter);

  actor = new Actor();

  fireEvent = function(event) {
    var ref;
    if (!event.type || (ref = event.type, indexOf.call(EVENT_TYPE, ref) < 0)) {
      throw new Error('Event value error');
    } else {
      return actor.emit(event.type, event);
    }
  };

  addListener = function(eventType, lisenter) {
    if (indexOf.call(EVENT_TYPE, eventType) < 0) {
      throw new Error('Unkown event value');
    }
    return actor.on(eventType, lisenter);
  };

  readCard = function(param, callback) {
    var cardNo, operateData, readData, ref, serviceName, timeOut, track1, track2, track3, ver;
    ver = param.ver || '1.0.0.0';
    timeOut = param.timeOut || 1000;
    if (!param.serviceName || (ref = param.serviceName, indexOf.call(SERVICE_NAME, ref) < 0)) {
      throw new Error('Service name error');
    }
    serviceName = param.serviceName;
    if (!param.readData || param.readData.length === 0) {
      throw new Error('Request data error');
    }
    readData = param.readData;
    track1 = 'track1';
    track2 = 'track2';
    track3 = 'track3';
    cardNo = 'cardNo';
    switch (serviceName) {
      case 'NtCardReader':
        dll.NtCardReader(track1, track2, track3, cardNo, function(error, data) {
          return callback(error, operateData(ver, serviceName, readData, data));
        });
        break;
      case 'NtCLCardReader':
        dll.NtCLCardReader(track1, track2, track3, cardNo, function(error, data) {
          return callback(error, operateData(ver, serviceName, readData, data));
        });
        break;
      case 'NtMagneticStripeReader':
        dll.NtMagneticStripeReader(track1, track2, track3, cardNo, function(error, data) {
          return callback(error, operateData(ver, serviceName, readData, data));
        });
        break;
      case 'NtIdentityReader':
        dll.NtIdentityReader(function(error, data) {
          data.ver = ver;
          data.serviceName = serviceName;
          return callback(error, data);
        });
        break;
      default:
        throw new Error('Unkown serviceName');
    }
    return operateData = function(ver, serviceName, readData, data) {
      var i, key, len, result;
      result = {};
      result.ver = ver;
      result.serviceName = serviceName;
      for (i = 0, len = readData.length; i < len; i++) {
        key = readData[i];
        result[key] = data[key];
      }
      return result;
    };
  };

  readCardSync = function(param) {
    var cardNo, operateDataSync, readData, ref, serviceName, timeOut, track1, track2, track3, ver;
    ver = param.ver || '1.0.0.0';
    timeOut = param.timeOut || 1000;
    if (!param.serviceName || (ref = param.serviceName, indexOf.call(SERVICE_NAME, ref) < 0)) {
      throw new Error('Service name error');
    }
    serviceName = param.serviceName;
    if (!param.readData || param.readData.length === 0) {
      throw new Error('Request data error');
    }
    readData = param.readData;
    track1 = 'track1';
    track2 = 'track2';
    track3 = 'track3';
    cardNo = 'cardNo';
    operateDataSync = function(ver, serviceName, readData, data) {
      var key, ref1, value;
      data.data.ver = ver;
      data.data.serviceName = serviceName;
      ref1 = data.data;
      for (key in ref1) {
        value = ref1[key];
        if (indexOf.call(readData, key) < 0) {
          delete data.data[key];
        }
      }
      return data;
    };
    switch (serviceName) {
      case 'NtCardReader':
        return operateDataSync(ver, serviceName, readData, dll.NtCardReaderSync(track1, track2, track3, cardNo));
      case 'NtCLCardReader':
        return operateDataSync(ver, serviceName, readData, dll.NtCLCardReaderSync(track1, track2, track3, cardNo));
      case 'NtMagneticStripeReader':
        return operateDataSync(ver, serviceName, readData, dll.NtMagneticStripeReaderSync(track1, track2, track3, cardNo));
      case 'NtIdentityReader':
        return operateDataSync(ver, serviceName, readData, dll.NtIdentityReaderSync());
      default:
        throw new Error('Unkown serviceName');
    }
  };

  getCardReaderStatus = function(param, callback) {
    var insertVerInfo, ref, serviceName, timeOut, ver;
    ver = param.ver || '1.0.0.0';
    timeOut = param.timeOut || 1000;
    if (!param.serviceName || (ref = param.serviceName, indexOf.call(SERVICE_NAME, ref) < 0)) {
      throw new Error('Service name error');
    }
    serviceName = param.serviceName;
    insertVerInfo = function(readerStatus) {
      readerStatus.ver = ver;
      readerStatus.serviceName = serviceName;
      return readerStatus;
    };
    switch (serviceName) {
      case 'NtCardReader':
        return dll.getNtCardReaderStatus(function(error, status) {
          if (error) {
            callback({
              "errorCode": "IDC88888",
              "errorDesc": "连接[NtCardReader]设备错误"
            }, {
              "status": "99"
            });
          }
          return callback({
            "errorCode": "IDC00000",
            "errorDesc": "连接[NtCardReader]设备成功"
          }, insertVerInfo(status));
        });
      case 'NtCLCardReader':
        return dll.getNtCLCardReaderStatus(function(error, status) {
          if (error) {
            callback({
              "errorCode": "IDC88888",
              "errorDesc": "连接[NtCardReader]设备错误"
            }, {
              "status": "99"
            });
          }
          return callback({
            "errorCode": "IDC00000",
            "errorDesc": "连接[NtCardReader]设备成功"
          }, insertVerInfo(status));
        });
      case 'NtMagneticStripeReader':
        return dll.getNtMagneticStripeReaderStatus(function(error, status) {
          if (error) {
            callback({
              "errorCode": "IDC88888",
              "errorDesc": "连接[NtCardReader]设备错误"
            }, {
              "status": "99"
            });
          }
          return callback({
            "errorCode": "IDC00000",
            "errorDesc": "连接[NtCardReader]设备成功"
          }, insertVerInfo(status));
        });
      case 'NtIdentityReader':
        return dll.getNtIdentityReaderStatus(function(error, status) {
          if (error) {
            callback({
              "errorCode": "IDC88888",
              "errorDesc": "连接[NtCardReader]设备错误"
            }, {
              "status": "99"
            });
          }
          return callback({
            "errorCode": "IDC00000",
            "errorDesc": "连接[NtCardReader]设备成功"
          }, insertVerInfo(status));
        });
      default:
        throw new Error("Service name error");
    }
  };

  getCardReaderStatusSync = function(param) {
    var operateDataSync, ref, serviceName, timeOut, ver;
    ver = param.ver || '1.0.0.0';
    timeOut = param.timeOut || 1000;
    if (!param.serviceName || (ref = param.serviceName, indexOf.call(SERVICE_NAME, ref) < 0)) {
      throw new Error('Service name error');
    }
    serviceName = param.serviceName;
    operateDataSync = function(ver, serviceName, status) {
      status.data.ver = ver;
      status.data.serviceName = serviceName;
      return status;
    };
    switch (serviceName) {
      case 'NtCardReader':
        return operateDataSync(ver, serviceName, dll.getNtCardReaderStatusSync());
      case 'NtCLCardReader':
        return operateDataSync(ver, serviceName, dll.getNtCLCardReaderStatusSync());
      case 'NtMagneticStripeReader':
        return operateDataSync(ver, serviceName, dll.getNtMagneticStripeReaderStatusSync());
      case 'NtIdentityReader':
        return operateDataSync(ver, serviceName, dll.getNtIdentityReaderStatusSync());
      default:
        throw new Error('Unkown serviceName');
    }
  };

  operateCard = function(param, callback) {
    var action, ref, ref1, serviceName, timeOut, ver;
    ver = param.ver || '1.0.0.0';
    timeOut = param.timeOut || 1000;
    if (!param.serviceName || (ref = param.serviceName, indexOf.call(SERVICE_NAME, ref) < 0)) {
      throw new Error('Service name error');
    }
    serviceName = param.serviceName;
    if (!param.action || (ref1 = param.action, indexOf.call(CARD_ACTION, ref1) < 0)) {
      throw new Error('Unkown action');
    }
    action = param.action;
    return dll.operateCard(serviceName, action, callback);
  };

  operateCardSync = function(param) {
    var action, ref, ref1, serviceName, timeOut, ver;
    ver = param.ver || '1.0.0.0';
    timeOut = param.timeOut || 1000;
    if (!param.serviceName || (ref = param.serviceName, indexOf.call(SERVICE_NAME, ref) < 0)) {
      throw new Error('Service name error');
    }
    serviceName = param.serviceName;
    if (!param.action || (ref1 = param.action, indexOf.call(CARD_ACTION, ref1) < 0)) {
      throw new Error('Unkown action');
    }
    action = param.action;
    return dll.operateCardSync(serviceName, action);
  };

  printData = function(param, callback) {
    var ref, serviceName, timeOut, ver;
    ver = param.ver || '1.0.0.0';
    timeOut = param.timeOut || 1000;
    if (!param.serviceName || (ref = param.serviceName, indexOf.call(PRINTER, ref) < 0)) {
      throw new Error('Unkown printer type');
    }
    serviceName = param.serviceName;
    return dll.printData(serviceName, param.data, callback);
  };

  printDataSync = function(param) {
    var ref, serviceName, timeOut, ver;
    ver = param.ver || '1.0.0.0';
    timeOut = param.timeOut || 1000;
    if (!param.serviceName || (ref = param.serviceName, indexOf.call(PRINTER, ref) < 0)) {
      throw new Error('Unkown printer type');
    }
    serviceName = param.serviceName;
    return dll.printDataSync(serviceName, param.data);
  };

  printDimensionCodeData = function(param, callback) {
    var ref, serviceName, timeOut, ver;
    ver = param.ver || '1.0.0.0';
    timeOut = param.timeOut || 1000;
    if (!param.serviceName || (ref = param.serviceName, indexOf.call(PRINTER, ref) < 0)) {
      throw new Error('Unkown printer type');
    }
    serviceName = param.serviceName;
    return dll.printDimensionCodeData(serviceName, param.codeType, param.codeImgPath, callback);
  };

  printDimensionCodeDataSync = function(param) {
    var ref, serviceName, timeOut, ver;
    ver = param.ver || '1.0.0.0';
    timeOut = param.timeOut || 1000;
    if (!param.serviceName || (ref = param.serviceName, indexOf.call(PRINTER, ref) < 0)) {
      throw new Error('Unkown printer type');
    }
    serviceName = param.serviceName;
    return dll.printDimensionCodeDataSync(serviceName, param.codeType, param.codeImgPath);
  };

  getPrinterStatus = function(param, callback) {
    var ref, serviceName, timeOut, ver;
    ver = param.ver || '1.0.0.0';
    timeOut = param.timeOut || 1000;
    if (!param.serviceName || (ref = param.serviceName, indexOf.call(PRINTER, ref) < 0)) {
      throw new Error('Unkown printer type');
    }
    serviceName = param.serviceName;
    return dll.getPrinterStatus(serviceName, callback);
  };

  getPrinterStatusSync = function(param, callback) {
    var ref, serviceName, timeOut, ver;
    ver = param.ver || '1.0.0.0';
    timeOut = param.timeOut || 1000;
    if (!param.serviceName || (ref = param.serviceName, indexOf.call(PRINTER, ref) < 0)) {
      throw new Error('Unkown printer type');
    }
    serviceName = param.serviceName;
    return dll.getPrinterStatusSync(serviceName);
  };

  operatePrinter = function(param, callback) {
    var action, ref, ref1, serviceName, timeOut, ver;
    ver = param.ver || '1.0.0.0';
    timeOut = param.timeOut || 1000;
    if (!param.serviceName || (ref = param.serviceName, indexOf.call(PRINTER, ref) < 0)) {
      throw new Error('Unkown printer type');
    }
    serviceName = param.serviceName;
    if (!param.action || (ref1 = param.action, indexOf.call(PRINTER_ACTION, ref1) < 0)) {
      throw new Error('Unkown printer action');
    }
    action = param.action;
    return dll.operatePrinter(serviceName, action, callback);
  };

  operatePrinterSync = function(param) {
    var action, ref, ref1, serviceName, timeOut, ver;
    ver = param.ver || '1.0.0.0';
    timeOut = param.timeOut || 1000;
    if (!param.serviceName || (ref = param.serviceName, indexOf.call(PRINTER, ref) < 0)) {
      throw new Error('Unkown printer type');
    }
    serviceName = param.serviceName;
    if (!param.action || (ref1 = param.action, indexOf.call(PRINTER_ACTION, ref1) < 0)) {
      throw new Error('Unkown printer action');
    }
    action = param.action;
    return dll.operatePrinterSync(serviceName, action);
  };

  module.exports = {
    fireEvent: fireEvent,
    addListener: addListener,
    readCard: readCard,
    readCardSync: readCardSync,
    getCardReaderStatus: getCardReaderStatus,
    getCardReaderStatusSync: getCardReaderStatusSync,
    operateCard: operateCard,
    operateCardSync: operateCardSync,
    printData: printData,
    printDataSync: printDataSync,
    printDimensionCodeData: printDimensionCodeData,
    printDimensionCodeDataSync: printDimensionCodeDataSync,
    getPrinterStatus: getPrinterStatus,
    getPrinterStatusSync: getPrinterStatusSync,
    operatePrinter: operatePrinter,
    operatePrinterSync: operatePrinterSync
  };

}).call(this);
